https://css-tricks.com/snippets/css/a-guide-to-flexbox/
https://css-tricks.com/almanac/properties/f/flex/
https://www.flaticon.es/
https://icons.getbootstrap.com/?q=sign
https://www.npmjs.com/package/ngx-toastr

==================================================================================================

Seccion 01: Creando la aplicacion Fromtend e instalando bootstrap

01. En la carpeta donde creamos nuestra aplicacion backend "Server", es decir MEAN_Login_CRUD
    vamos a crear la aplicacion frontend con Angular
    En la ventana de comandos nos posicionamos en MEAN_Login_CRUD y ejecutamos:

    ng new Frontend

02. Configurando bootstrap para tener autocomplete de sus clases
    - Primero que todo, instalar la extensi칩n: HTML CSS Support

    A. Ingresar a los Settings
       File/Preferences7Settings
    B. Seleccionar Workspace
    C. Seleccinar Extensions/CSS Settings
    D. En CSS Settings hacer click en Edit in settings.json
    E. En el archivo que abre colocar:
       {
            "css.styleSheets": [
                
                "https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css",
                "/src/styles.css",
                "styles.css",
                "/src/assets/libs/font-awesome/css/all.min.css",
                "${fileBasenameNoExtension}.css"
            ],
            "css.validate": false
        }
    
    * Podemos agregar la direcci칩n de cualquier hoja de estilos que vayamos a utilizar
      para poder tener sus clases en el intellisense

03. Creando los componentes login, signIn, dashboard, spinner y navbar
    ng g c components/login --skip-tests
    ng g c components/signIn --skip-tests 
    ng g c components/dashboard --skip-tests
    ng g c shared/spinner --skip-tests
    ng g c components/dashboard/navbar --skip-tests

========================================================================================

Seccion 02: Login HTML

01. Para hacer que un componente me coupe en 100% del height de la pantall, primero tengo
    que poner a침 100% a los elementos padres html y body en styles.css
html, body {
    height: 100%;
}

Luego al elemento hijo ponerle su height al 100%
.wrapper {
    background-color: darkgray;
    height: 100%;
}

<div class="wrapper">
   <h1>Login</h1>
</div>

========================================================================================

Seccion 03: Ruteo y registrar usuario

01. Es importante poner la barra en /signin o en /dashboard para que busque la ruta en
    localhost:4200/signin
    Sino buscara la ruta login/signin que no existe

========================================================================================

Seccion 04: Dashboard HTML

========================================================================================

Seccion 05: signin

01. importamos el HttpClientModule en app.module.ts

02. No se estan usanado formularios reactivos, sino ngModel en el html de lso componentes
    [(ngModel)]="username"
    Para que ngModel funcione hay que importar FormsModule en app.module.ts

03. Usar toastr angular
    A. Instalando toastr angular para la version 14 de angular. verificar en la pagina que
       version usar https://www.npmjs.com/package/ngx-toastr
       npm i ngx-toastr@15.2.2

    B. Instalando tambien la animaciones
       npm install @angular/animations --save

    C. Agreagar lo estilos a angular.json
       "styles": [
            "styles.scss",
            "node_modules/ngx-toastr/toastr.css" 
        ]

    D. Agregar al modulo de la aplicacion app.module.ts los sgtes modulos
       imports: [
            ...,
            BrowserAnimationsModule, // required animations module
            ToastrModule.forRoot(), // ToastrModule added
       ]

    E. Usamos
       import { ToastrService } from 'ngx-toastr';

        @Component({...})
        export class YourComponent {
            constructor(private toastr: ToastrService) {}

            showSuccess() {
                this.toastr.success('Hello world!', 'Toastr fun!');
            }
        }

    F. Podemos agregar configuraciones globales para toastr en el modulo app.module.ts
       ToastrModule.forRoot({ 
            timeOut: 3000,
            positionClass: 'toast-top-right',
            preventDuplicates: true,
            progressAnimation: "decreasing"
        })

========================================================================================

Seccion 06: signin mensajes

========================================================================================

Seccion 06: Login

========================================================================================

Seccion 06: Interceptor

01. Creacion del interceptor en la carpeta utils
    ng g interceptor utils/addToken

02. Implementacion del interceptor
    intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {
        const token = localStorage.getItem("token");
        // Si el token ExpressionStatement, agregamos en las cabeceras del request el 
        // Bearer token
        if (token) {
            request = request.clone({ setHeaders: { Authorization: `Bearer ${token}` } })
        }
        return next.handle(request);
    }

03. Configuramos el uso de interceptores en app.module.ts
    providers: [
        { provide: HTTP_INTERCEPTORS, useClass: AddTokenInterceptor, multi: true }
    ]

========================================================================================

Seccion 07: Guard

La idea es que el Guard no te permita ingresar a ciertas rutas si no hay un token en local storage, es decir si no hay un usuario logueado

01. Creando el Guard
    ng g guard utils/auth --skip-tests
    Y selecionamos la opcion CanActivate

02. Colocamos el Guard en la ruta que queremos proteger en app.routing.module.ts
     { path: "dashboard", component: DashboardComponent, canActivate: [AuthGuard] }

03. Implementamos el Guard
    canActivate(
        route: ActivatedRouteSnapshot,
        state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {

        const token = localStorage.getItem("token");

        if (token == undefined) {
            this.router.navigate(["/login"]);
        }

        return true;
    }

========================================================================================

NOTA: Antes de empezar con el CRUD, cree en la carpeta dashboard, la carpeta shared con su
respectivo modulo. Adem치s del routing y el modulo de dashboard.
Retire la declaracion de navbar y dashboard de app.module y la coloque en dashboard.module
Ahora todo el contenido de dashboard se carga con lazy load, es decir solo recien cuando
carga el modulo dashboard. Ver app-routing







